default_platform(:ios)

platform :ios do

  # MARK: - Set up
  
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    ENV["TARGET"] = "GoCook"
    ENV["XCODEPROJ"] = "GoCook.xcodeproj"
  end

  # MARK: - Devices/Certificates

  lane :add_device do
    device_name = prompt(text: "Enter the device name: ")
    device_udid = prompt(text: "Enter the device UDID: ")
    device_hash = {}
    device_hash[device_name] = device_udid
    register_devices(devices: device_hash)
    match(type: "development", force_for_new_devices: true)
  end

  desc "Fetches certificates and profiles from the ios-certificates repository by HTTPS"
  lane :sync_profiles do
    match(type: "development", readonly: true)
    match(type: "appstore", readonly: true)
  end

  # MARK: - Test project

  desc "Runs all the tests"
  lane :test do |options|
    scheme = get_scheme(build_configuration: options[:build_configuration])
    run_tests(
      scheme: scheme,
      device: 'iPhone 14 Pro',
      output_types: "junit",
      output_files: "results.xml",
      cloned_source_packages_path: "SourcePackages",
      # slack_default_payloads: ['lane', 'test_result', 'git_branch', 'git_author', 'last_git_commit', 'last_git_commit_hash']
    )
  end

  # MARK: - Increase build version

  lane :increase_build_version do
    build_number = get_build_number(xcodeproj: ENV["XCODEPROJ"]).to_i + 1
    increment_build_number(build_number: build_number)
    commit_version_bump(xcodeproj: ENV["XCODEPROJ"], message: "chore: bump build number #{build_number}")
  end

  # MARK: - Development

  lane :deploy_dev do
    ENV["BUNDLE_ID"] = "com.uptech.gocook"
    deploy_development
  end

  private_lane :deploy_development do
    # Fetch provisioning profiles
    match(
      type: "appstore",
      readonly: true
    )

    # Build the project with Staging scheme
    scheme = get_scheme(build_configuration: "development")
    build_ios_app(
      scheme: scheme,
      export_method: "app-store",
      cloned_source_packages_path: "SourcePackages"
    )

    # Upload the build
    connect_to_app_store
    upload_to_testflight(
      username: ENV["FASTLANE_USER"],
      app_identifier: ENV["BUNDLE_ID"],
      skip_waiting_for_build_processing: true
    )

    # upload_dsyms

    # Commit bump build number, add a tag and push
    clean_build_artifacts

    version = get_version_number(xcodeproj: ENV["XCODEPROJ"], target: ENV["TARGET"])
    build = get_build_number(xcodeproj: ENV["XCODEPROJ"])
    add_git_tag(tag: "development/v#{version}/#{build}")
    push_git_tags

    # post_to_slack(configuration: "Development")
  end

  # MARK: - Production

  lane :deploy_prod do
    ENV["BUNDLE_ID"] = "com.uptech.gocook"
    deploy_production
  end

  private_lane :deploy_production do
    # Fetch provisioning profiles
    match(
      type: "appstore",
      readonly: true
    )

    # Build the project with Staging scheme
    scheme = get_scheme(build_configuration: "production")
    build_ios_app(
      scheme: scheme,
      export_method: "app-store",
      cloned_source_packages_path: "SourcePackages"
    )

    # Upload the build
    connect_to_app_store
    upload_to_testflight(
      username: ENV["FASTLANE_USER"],
      app_identifier: ENV["BUNDLE_ID"],
      skip_waiting_for_build_processing: true
    )

    upload_dsyms

    # Commit bump build number, add a tag and push
    clean_build_artifacts

    version = get_version_number(xcodeproj: ENV["XCODEPROJ"], target: ENV["TARGET"])
    build = get_build_number(xcodeproj: ENV["XCODEPROJ"])
    add_git_tag(
      tag: "production/v#{version}/#{build}"
    )
    push_git_tags

    post_to_slack(configuration: "Production")
  end

  # MARK: - Sentry

  desc "upload dsyms to Sentry service"
  lane :upload_dsyms do
    sentry_upload_dif(
      auth_token: 'not_a_token',
      org_slug: 'uptech-team',
      project_slug: 'gocook-ios',
      path: './GoCook.app.dSYM.zip',
      include_sources: true
    )
  end

  # MARK: - Helper methods

  desc "Get App Store Connect api key using env variables"
  lane :connect_to_app_store do
    key_id = ENV["KEY_ID"]
    issuer_id = ENV["ISSUER_ID"]
    key_content = ENV["KEY_CONTENT"]
    app_store_connect_api_key(
      key_id: key_id,
      issuer_id: issuer_id,
      key_content: key_content
    )
  end

  desc "Get project scheme (dev, staging or prod)"
  private_lane :get_scheme do |options|
    build_configuration = options[:build_configuration]
    if !build_configuration 
      UI.build_failure!("No build configuration was passed!")
    end

    case build_configuration
    when "development"
      "Development"
    when "production"
      "Production"
    else
      UI.build_failure!("Couldn't recognise passed build configuration!")
    end
  end

  desc "Post message to Slack CI channel"
  private_lane :post_to_slack do |options|
    version = get_version_number(xcodeproj: ENV["XCODEPROJ"], target: ENV["TARGET"])
    build = get_build_number(xcodeproj: ENV["XCODEPROJ"])
    configuration = options[:configuration]

    slack(
      message: "New iOS #{configuration} build *#{version}* (#{build}) has been submitted to the TestFlight!",
      use_webhook_configured_username_and_icon: true
    )
  end

end